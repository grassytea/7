def func1(arg1, arg2):
    var27 = func2(arg2, arg1)
    var44 = var30(arg1, var27)
    def func9(arg45, arg46):
        var47 = (var44 | arg1 & var27) | 717216771
        var48 = var44 | var47 & var44 + var44
        var49 = arg46 ^ var44
        var50 = var48 - var49
        var51 = var44 ^ var44
        var52 = var49 & var51
        if var52 < var48:
            var53 = var51 + var52
        else:
            var53 = (var48 - arg46) + var49 + arg1
        var54 = var52 ^ (var51 & var50) - var44
        var55 = 136 - (-192 - var54) + var27
        var56 = var44 + var54 - (-979 & arg46)
        var57 = var51 & var47 ^ var44 - var50
        var58 = var49 ^ var48 & (var48 - arg46)
        var59 = var51 | var50
        var60 = 613 - var51
        var61 = arg46 ^ var52 | var58 & var51
        var62 = (var52 ^ var52 & var54) ^ arg2
        var63 = (var48 ^ var54 - var57) - var55
        var64 = (var60 - arg2 + var27) ^ var60
        var65 = (arg1 & var63) - arg1 + var54
        var66 = var61 ^ var65 & var49 + var48
        var67 = var60 ^ var54 ^ var58
        var68 = (arg1 - var56) & var63
        result = var27 + var63
        return result
    var69 = func9(arg1, var44)
    var70 = var27 | arg1
    result = arg1 - 770153840 ^ var70 ^ (var70 | var44)
    return result
def func5(arg31, arg32):
    var36 = func6(arg32, arg31)
    var40 = func7(var36, arg32)
    if var40 < arg31:
        var41 = var36 - (arg32 + 253182716)
    else:
        var41 = var40 ^ arg32 ^ var36
    var42 = var36 | arg32 - -423 - ((var36 + var36 ^ (var40 ^ -126903954 + (arg31 - var40)) + arg32 & (var36 | var36)) - arg32) | arg31 + -935 ^ ((var36 & (((var40 + (var36 ^ var40)) | arg32) - arg32)) - var40)
    var43 = 536 + var36
    result = var42 & (var42 | ((arg32 & var42 | (arg32 ^ var42) - var36 & arg31 + 1667601378) - arg32) - var40) + arg31
    return result
def func6(arg33, arg34):
    var35 = -558 + -1570011637 | arg34 & arg34 & arg33
    result = -52 | -572 + arg34
    return result
def func4():
    closure = [-4]
    def func3(arg28, arg29):
        closure[0] += func5(arg28, arg29)
        return closure[0]
    func = func3
    return func
var30 = func4()
def func2(arg3, arg4):
    var5 = (-245982565 ^ 2135994778) & arg4 + arg3
    var6 = arg3 & var5 ^ -1988079247
    var7 = arg3 - arg3 | arg4 - 232699733
    var8 = var5 ^ -844638574 & arg3 + var7
    var9 = ((arg4 + -128) + arg3) ^ 1163692545
    var10 = arg3 ^ 345
    var11 = -476 & ((arg3 + var5) | arg3)
    var12 = var11 - (var8 ^ arg3 & -1685546204)
    var13 = ((var7 | var6) + var11) - var5
    var14 = (501 | arg3 + var7) & arg4
    var15 = var12 - var9
    var16 = var10 & (var6 | var13)
    var17 = var7 - (var6 ^ -158) & var15
    var18 = var12 & var14 + var13
    var19 = arg4 ^ (var17 + 394349964 | arg3)
    var20 = (-1519088669 ^ var14 + var11) ^ var13
    var21 = -741 + (-256 - var19)
    var22 = var18 - ((var18 & var10) | var6)
    var23 = 373 ^ (var22 + var20)
    var24 = (var18 + var18) ^ var12 & var15
    var25 = (var8 ^ -2065690113) + var19 + arg3
    var26 = (var22 | var7) & (-993 ^ var23)
    result = var7 - var18 ^ var25 + var5
    return result
def func7(arg37, arg38):
    closure = [0]
    def func8(acc, rest):
        var39 = 4 & -7
        closure[0] += var39
        if acc == 0:
            return var39
        else:
            result = func8(acc - 1, var39)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 71'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
